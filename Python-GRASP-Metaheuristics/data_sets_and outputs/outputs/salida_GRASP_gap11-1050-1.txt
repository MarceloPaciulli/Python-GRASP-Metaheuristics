Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> 
 RESTART: C:\Users\Marcelo\Desktop\Metaheurísticas\Trabajo Final - Curso de Posgrado - 2016\Code\GRASP_to_maximize\GRASP to maximize\main_GRASP.py 
wait for initial solution.....


seed was found!


Calculating...


Ingrese iteraciones máximas: 30



Ingrese valor de alfa (0.9-1.0): 1



search for optimal solutions....


############################################################


best benefit in 5.2601 segundos:  957.0


############################################################


best benefit in 6.0132 segundos:  996.0


############################################################


best benefit in 6.7367 segundos:  1030.0


############################################################


best benefit in 7.5571 segundos:  1035.0


############################################################


best benefit in 8.3779 segundos:  1038.0


############################################################


best benefit in 9.1967 segundos:  1045.0


############################################################


best benefit in 10.0242 segundos:  1058.0


############################################################


best benefit in 10.8468 segundos:  1065.0


############################################################


best benefit in 11.7667 segundos:  1068.0


############################################################


best benefit in 12.5848 segundos:  1073.0


############################################################


best benefit in 13.4362 segundos:  1081.0


############################################################


best benefit in 14.208 segundos:  1087.0


############################################################


best benefit in 15.0762 segundos:  1092.0


############################################################


best benefit in 15.8972 segundos:  1094.0


############################################################


best benefit in 16.7158 segundos:  1097.0


############################################################


best benefit in 17.5375 segundos:  1098.0


############################################################


best benefit in 18.3775 segundos:  1098.0


############################################################


best benefit in 19.3017 segundos:  1098.0


############################################################


best benefit in 20.2245 segundos:  1100.0


############################################################


best benefit in 20.9845 segundos:  1100.0


############################################################


best benefit in 21.7049 segundos:  1100.0


############################################################


best benefit in 22.5306 segundos:  1106.0


############################################################


best benefit in 23.3602 segundos:  1109.0


############################################################


best benefit in 24.1276 segundos:  1111.0


############################################################


best benefit in 24.9459 segundos:  1113.0


############################################################


best benefit in 25.7794 segundos:  1113.0


############################################################


best benefit in 26.6096 segundos:  1113.0


############################################################


best benefit in 27.4489 segundos:  1113.0


############################################################


best benefit in 28.2004 segundos:  1113.0


############################################################


best benefit in 28.944 segundos:  1113.0


############################################################



Mejor solución hallada: 
 
 [[ 0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.
   0.  0.  0.  1.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  1.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.
   0.  1.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 1.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  1.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  0.  0.  0.
   1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.
   1.  1.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  1.  0.  0.  1.  0.  0.  0.  0.  0.]
 [ 0.  1.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  1.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  1.  0.
   0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.
   0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  1.]] 


Tiempo consumido (seg):  28.962
Ganancia obtenida:  1113.0
Asignaciones Agente-tarea:  

 [(0, 2), (0, 17), (0, 21), (0, 26), (0, 39), (0, 42), (1, 5), (1, 14), (1, 33), (1, 37), (1, 40), (2, 0), (2, 3), (2, 28), (2, 43), (3, 4), (3, 8), (3, 30), (3, 31), (3, 32), (3, 36), (3, 48), (4, 15), (4, 18), (4, 19), (4, 22), (4, 34), (5, 9), (5, 23), (5, 41), (5, 44), (6, 1), (6, 7), (6, 20), (6, 27), (7, 13), (7, 16), (7, 24), (7, 47), (8, 6), (8, 25), (8, 35), (8, 38), (8, 46), (9, 10), (9, 11), (9, 12), (9, 29), (9, 45), (9, 49)] 

 
Cantidad de tareas para cada agente: 

 [6 5 4 7 5 4 4 4 5 6] 


>>> 
