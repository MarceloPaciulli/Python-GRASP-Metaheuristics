Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> 
 RESTART: C:\Users\Marcelo\Desktop\Metaheurísticas\Trabajo Final - Curso de Posgrado - 2016\Code\GRASP_to_maximize\GRASP to maximize\main_GRASP.py 
wait for initial solution.....


seed was found!


Calculating...


Ingrese iteraciones máximas: 20



Ingrese valor de alfa (0.9-1.0): 1



search for optimal solutions....


############################################################


best benefit in 4.9291 segundos:  851.0


############################################################


best benefit in 5.4423 segundos:  862.0


############################################################


best benefit in 6.0665 segundos:  862.0


############################################################


best benefit in 6.6335 segundos:  874.0


############################################################


best benefit in 7.1985 segundos:  880.0


############################################################


best benefit in 7.7557 segundos:  880.0


############################################################


best benefit in 8.2761 segundos:  889.0


############################################################


best benefit in 8.8946 segundos:  891.0


############################################################


best benefit in 9.4497 segundos:  898.0


############################################################


best benefit in 10.0682 segundos:  905.0


############################################################


best benefit in 10.629 segundos:  910.0


############################################################


best benefit in 11.2538 segundos:  912.0


############################################################


best benefit in 11.8907 segundos:  917.0


############################################################


best benefit in 12.413 segundos:  917.0


############################################################


best benefit in 12.9419 segundos:  921.0


############################################################


best benefit in 13.4592 segundos:  921.0


############################################################


best benefit in 14.0864 segundos:  921.0


############################################################


best benefit in 14.6267 segundos:  921.0


############################################################


best benefit in 15.1556 segundos:  922.0


############################################################


best benefit in 15.6825 segundos:  922.0


############################################################



Mejor solución hallada: 
 
 [[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  1.  0.  0.  0.  1.  0.  0.  0.  1.  0.  0.  0.  0.  0.
   0.  0.  1.  0.]
 [ 0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.
   1.  0.  0.  1.]
 [ 0.  1.  0.  1.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  1.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  1.  0.
   1.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.]
 [ 0.  0.  0.  0.  1.  0.  1.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  1.  0.
   0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  1.  1.  1.  0.  1.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  1.
   0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  1.  0.  0.  0.
   0.  0.  0.  0.]
 [ 1.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  1.  0.  0.  0.  1.  0.  1.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.
   0.  0.  0.  0.]] 


Tiempo consumido (seg):  15.6997
Ganancia obtenida:  922.0
Asignaciones Agente-tarea:  

 [(0, 22), (0, 26), (0, 30), (0, 38), (1, 2), (1, 17), (1, 27), (1, 36), (1, 39), (2, 1), (2, 3), (2, 7), (2, 24), (2, 37), (3, 10), (3, 16), (3, 18), (3, 20), (4, 4), (4, 6), (4, 14), (4, 29), (4, 34), (5, 8), (5, 11), (5, 12), (5, 13), (5, 15), (5, 31), (5, 35), (6, 5), (6, 21), (6, 28), (6, 32), (7, 0), (7, 9), (7, 19), (7, 23), (7, 25), (7, 33)] 

 
Cantidad de tareas para cada agente: 

 [4 5 5 4 5 7 4 6] 


>>> 
