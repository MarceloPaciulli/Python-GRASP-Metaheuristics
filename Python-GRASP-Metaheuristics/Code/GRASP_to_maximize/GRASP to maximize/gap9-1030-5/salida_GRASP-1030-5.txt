Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> 
 RESTART: C:\Users\Marcelo\Desktop\Metaheurísticas\Trabajo Final - Curso de Posgrado - 2016\Code\GRASP_to_maximize\GRASP to maximize\main_GRASP.py 
wait for initial solution.....


seed was found!


Calculating...


Ingrese iteraciones máximas: 20



Ingrese valor de alfa (0.9-1.0): 1



search for optimal solutions....


############################################################


best benefit in 9.7466 segundos:  639.0


############################################################


best benefit in 10.1794 segundos:  643.0


############################################################


best benefit in 10.6206 segundos:  643.0


############################################################


best benefit in 11.0725 segundos:  643.0


############################################################


best benefit in 11.5194 segundos:  644.0


############################################################


best benefit in 12.0296 segundos:  655.0


############################################################


best benefit in 12.5472 segundos:  661.0


############################################################


best benefit in 13.0727 segundos:  662.0


############################################################


best benefit in 13.5983 segundos:  665.0


############################################################


best benefit in 14.1174 segundos:  669.0


############################################################


best benefit in 14.6397 segundos:  675.0


############################################################


best benefit in 15.1586 segundos:  677.0


############################################################


best benefit in 15.6865 segundos:  678.0


############################################################


best benefit in 16.1294 segundos:  684.0


############################################################


best benefit in 16.6588 segundos:  684.0


############################################################


best benefit in 17.1994 segundos:  685.0


############################################################


best benefit in 17.729 segundos:  689.0


############################################################


best benefit in 18.171 segundos:  689.0


############################################################


best benefit in 18.6977 segundos:  689.0


############################################################


best benefit in 19.2279 segundos:  689.0


############################################################



Mejor solución hallada: 
 
 [[ 0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.
   0.  0.  1.  0.  0.  0.  1.  0.  0.  1.  0.  0.]
 [ 0.  0.  1.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.
   0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  1.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.]
 [ 1.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  1.  0.
   0.  1.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.
   0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.]] 


Tiempo consumido (seg):  19.2572
Ganancia obtenida:  689.0
Asignaciones Agente-tarea:  

 [(0, 4), (0, 5), (0, 18), (1, 11), (1, 20), (1, 24), (1, 27), (2, 2), (2, 6), (2, 17), (2, 21), (3, 8), (3, 13), (3, 28), (4, 22), (4, 23), (5, 14), (5, 29), (6, 0), (6, 3), (6, 15), (7, 9), (7, 16), (7, 19), (7, 25), (8, 7), (8, 10), (9, 1), (9, 12), (9, 26)] 

 
Cantidad de tareas para cada agente: 

 [3 4 4 3 2 2 3 4 2 3] 


>>> 
